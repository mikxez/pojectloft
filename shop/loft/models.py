from django.db import models
from django.urls import reverse
from django.contrib.auth.models import User


# Create your models here.
class Category(models.Model):
    title = models.CharField(max_length=150, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    icon = models.ImageField(upload_to='icons/', null=True, blank=True, verbose_name='–ò–∫–æ–Ω–∫–∞')
    slug = models.SlugField(unique=True, null=True, verbose_name='–ü–æ–ª–µ Slug')
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                               related_name='subcategories')

    def get_absolute_url(self):
        return reverse('category', kwargs={'slug': self.slug})

    def get_icon(self):
        if self.icon:
            return self.icon.url
        else:
            return 'üíÄ'

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'


class Product(models.Model):
    title = models.CharField(max_length=150, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    price = models.FloatField(verbose_name='–¶–µ–Ω–∞')
    quantity = models.IntegerField(default=0, verbose_name='–í –Ω–∞–ª–∏—á–∏–∏')
    color_name = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –¶–≤–µ—Ç–∞')
    color_code = models.CharField(max_length=10, verbose_name='–ö–æ–¥ –¶–≤–µ—Ç–∞')
    discount = models.IntegerField(default=0, null=True, blank=True, verbose_name='–°–∫–∏–¥–∫–∞')
    width = models.CharField(max_length=10, verbose_name='–®–∏—Ä–∏–Ω–∞')
    depth = models.CharField(max_length=10, verbose_name='–ì–ª—É–±–∏–Ω–∞')
    height = models.CharField(max_length=10, verbose_name='–í—ã—Å–æ—Ç–∞')
    category = models.ForeignKey(Category, on_delete=models.CASCADE, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞', related_name='products')
    brand = models.ForeignKey('BrandProduct', on_delete=models.CASCADE, null=True, blank=True, verbose_name='–ë—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞')
    slug = models.SlugField(unique=True, null=True, verbose_name='Slug —Ç–æ–≤–∞—Ä–∞')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', null=True, blank=True)

    def get_absolute_url(self):
        return reverse('product', kwargs={'slug': self.slug})

    def get_first_photo(self):
        if self.images:
            try:
                return self.images.first().image.url
            except:
                return '-'
        else:
            return '-'

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã'


class ImageProduct(models.Model):
    image = models.ImageField(upload_to='product_images/', verbose_name='–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞')
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='images', verbose_name='–¢–æ–≤–∞—Ä')

    def __str__(self):
        return self.product.title

    class Meta:
        verbose_name = '–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞'
        verbose_name_plural = '–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤'


class BrandProduct(models.Model):
    title = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –ë—Ä–µ–Ω–¥–∞ (–ú–∞—Ä–∫–∞)')

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–ë—Ä–µ–Ω–¥'
        verbose_name_plural = '–ë—Ä–µ–Ω–¥—ã'


# –ú–æ–¥–µ–ª—å –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
class FavoriteProduct(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name='–¢–æ–≤–∞—Ä')
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    def __str__(self):
        return f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user.username} —Ç–æ–≤–∞—Ä {self.product.title}'

    class Meta:
        verbose_name = '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'
        verbose_name_plural = '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'


#  ======================= –ú–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ========================

class Customer(models.Model):
    user = models.OneToOneField(User, on_delete=models.SET_NULL, null=True, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    first_name = models.CharField(max_length=100, verbose_name='–ò–º—è –ø–æ–∫—É–ø–µ—Ç–ª—è')
    last_name = models.CharField(max_length=100, verbose_name='–§–∞–º–∏–ª–∏—è –ø–æ–∫—É–ø–µ—Ç–ª—è')
    telegram = models.CharField(max_length=30, verbose_name='–¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–∫—É–ø–µ—Ç–ª—è', null=True, blank=True)


    def __str__(self):
        return f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {self.user.username}'

    class Meta:
        verbose_name = '–ü–æ–∫—É–ø–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏'

class Order(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True, verbose_name='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –∑–∞–∫–∑–∞')
    is_completed = models.BooleanField(default=False, verbose_name='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
    payment = models.BooleanField(default=False, verbose_name='–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã')
    shipping = models.BooleanField(default=True, verbose_name='–î–æ—Å—Ç–∞–≤–∫–∞')


    def __str__(self):
        return f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {self.customer.first_name} –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {self.pk}'

    class Meta:
        verbose_name = '–ó–∞–∫–∞–∑'
        verbose_name_plural = '–ó–∞–∫–∞–∑—ã'

    # –ó–¥–µ—Å—å –±—É–¥—É—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞
    @property
    def get_order_total_price(self):
        order_products = self.orderproduct_set.all()  # –ß–µ—Ä–µ–∑ –æ–±—Ä–∞–∑ –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–∏–º –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–≤–æ–∞—Ä—ã –ó–∞–∫–∞–∑–∞
        total_price = sum([product.get_total_price for product in order_products])  # [20 000, 10 000, 20 000]
        return total_price

    @property
    def get_order_total_products(self):
        order_products = self.orderproduct_set.all()
        total_products = sum([product.quantity for product in order_products])  #  [2, 1, 1]
        return total_products


class OrderProduct(models.Model):
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True, verbose_name='–¢–æ–≤–∞—Ä')
    order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True, verbose_name='–ó–∞–∫–∞–∑')
    quantity = models.IntegerField(default=0, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    added_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è')

    def __str__(self):
        return f'–¢–æ–≤–∞—Ä {self.product.title} –∑–∞–∫–∑–∞ ‚Ññ: {self.order.pk}'

    class Meta:
        verbose_name = '–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä'
        verbose_name_plural = '–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã'

    # –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    @property
    def get_total_price(self):
        if self.product.discount:
            sum_proc = (self.product.price * self.product.discount) / 100
            self.product.price -= sum_proc

        total_price = self.product.price * self.quantity
        return total_price

    def total_price(self):
        total_price = self.product.price * self.quantity
        return total_price


class ShippingAddress(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True, verbose_name='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å', related_name='shippings')
    order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True, verbose_name='–ó–∞–∫–∞–∑')
    address = models.CharField(max_length=150, verbose_name='–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤)')
    phone = models.CharField(max_length=30, verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    comment = models.TextField(max_length=200, default='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', null=True, blank=True, verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏')
    region = models.ForeignKey('Region', on_delete=models.SET_NULL, null=True, verbose_name='–†–µ–≥–∏–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏')
    city = models.ForeignKey('City', on_delete=models.SET_NULL, null=True, verbose_name='–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏')

    def __str__(self):
        return f'–ó–∞–∫–∞–∑ ‚Ññ:{self.order.pk} –Ω–∞ –∏–º—è {self.customer.first_name}'

    class Meta:
        verbose_name = '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'
        verbose_name_plural = '–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–æ–∫'


class Region(models.Model):
    title = models.CharField(max_length=100, verbose_name='–û–±–ª–∞—Å—Ç—å')

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–†–µ–≥–∏–æ–Ω'
        verbose_name_plural = '–†–µ–≥–∏–æ–Ω—ã'


class City(models.Model):
    title = models.CharField(max_length=100, verbose_name='–ì–æ—Ä–æ–¥')
    region = models.ForeignKey(Region, on_delete=models.CASCADE, verbose_name='–†–µ–≥–∏–æ–Ω', related_name='cities')

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–ì–æ—Ä–æ–¥'
        verbose_name_plural = '–ì–æ—Ä–æ–¥–∞'




class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    phone = models.CharField(max_length=50, verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    city = models.CharField(max_length=100, verbose_name='–ì–æ—Ä–æ–¥', null=True, blank=True)
    street = models.CharField(max_length=100, verbose_name='–£–ª–∏—Ü–∞',  null=True, blank=True)
    home = models.CharField(max_length=100, verbose_name='–î–æ–º', null=True, blank=True)
    flat = models.CharField(max_length=100, verbose_name='–ö–≤–∞—Ä—Ç–∏—Ä–∞', null=True, blank=True)


    def __str__(self):
        return self.user.username

    class Meta:
        verbose_name = '–ü—Ä–æ—Ñ–∏–ª—å'
        verbose_name_plural = '–ü—Ä–æ—Ñ–∏–ª–∏'
